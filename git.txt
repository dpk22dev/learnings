Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2014-07-18T10:19:52+05:30

====== git ======
Created Friday 18 July 2014

An untracked file is a file that exists in the working tree of a git repository but isn't listed in the index. 

An unstaged is a file that is listed in the index, but the contents of the file in the working tree are different to the contents listed in the index - the sha1 hash of the file in the working tree is different to the sha1 hash for that the same file in the list maintained by the index, usually because the file has been edited since the index was last updated by a checkout, reset or add command.

In both cases, running git add on the file will cause the file to be both staged and tracked and if the index is the committed in that state then the tree referenced by the new commit will contain a file with the same sha1 hash as the previously staged file

whatever file you create are shown in untracked by git, 
use git add to make it tracked, whatever changes you make in tracked files are shown as modified
when you git commit, objects are created index are created for those files 

if you want to not see untracked files put their names in gitignore

for git autocompletion use: **source /etc/bash_completion.d/git**

changes made to git are visible automatically to netbeans:

git pull origin master: means there is remote named origin, local copy of that master is in origin/master and we have our master branch
we can merge using git merge

HEAD is, normally, a symbolic reference to [the tip of] a branch when we checkout branch. we can point head to another commit( in detached HEAD state ) and create new branch from there.

try to avoid merge, run git rebase before pushing code, even on pull git by default merges code with branch( say master ). use rebase strategy on pull instead of merge
git config --global branch.autosetuprebase always

we can use **git reflog** to view brief history what we did recently, although viewing it with **git lg** is more better

**diff b/w checkout and reset**
checkout moves HEAD to some commit, while reset moves current branch to some commit

always make logical commits so that you can revert them if needed later

**diff b/w reset and revert**
**reset:** undo working changes and return to particular commit, commits are removed so shouldn't be done on public branches
**revert: **working dir should be clean before doing it, used for public commits


**git checkout -b newBranch existBranch**
create newBranch from existBranch

**git checkout bug** 
to change to bug branch

**git add file**
add file to current branch

**git status**
to show status of current files

**git commit -m "first comment"**
commit the changes to local

**git push**
it will push all the branches from local to remote

**git push origin bug**
push bug branch to remote

**git pull** 
it will pull all branches from remote to local

**git pull origin Branch**
it will pull Branch from remote to local

**git cherry -v master**
changes of current branch only; use **origin/master **if branch was made off origin/master rather than master

**git log master..**
changes if current branch only; use **origin/master **if branch was made off origin/master rather than master

**git checkout 0d1d7fc32**
to checkout prevous logged commit

**git reset --hard 0d1d7fc32**
this will destroy local modifications; use **git stash** before it if you want to keep current changes

**git show-branch**
to see branches and their commits 

**git show --pretty="format:" --name-only bd61ad98**
to show the list of files in commit with id bd61ad98.

or use:
**git diff-tree --no-commit-id --name-only -r bd61ad98**

**git branch -a**
shows all local and remote branches

**git branch -v**
shows head of each local branch

**git remote -v**
show fetch and push origins

**adding upstream to branch**
git branch --set-upstream-to=origin

**script to see git tree:**
git config --global alias.lg "log --graph --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(bold white)â€” %an%C(reset)%C(bold yellow)%d%C(reset)' --abbrev-commit --date=relative --all"

now use 
**git lg **to show tree
git lg shows commits acc to time, branches, head are just pointers to those commits

**to get file from other branch** 
git checkout branchX file2

git pull does a git fetch followed by a git merge. so git fetch is always safe.	
http://stackoverflow.com/questions/292357/what-are-the-differences-between-git-pull-and-git-fetch

**git merging selective files:**
http://stackoverflow.com/questions/449541/how-do-you-merge-selective-files-with-git-merge

**adding files to git:**
$ git add .   # add to index only files created/modified and not those deleted
$ git add -u  # add to index only files deleted/modified and not those created
$ git add -A  # do both operation at once, add to index all files

**diff b/w two branches**
git diff branch_1..branch_2

**diff b/w two branches with filenames only**
git diff --name-status branch1..branch2

**annotated tag in git**
git tag -a v1.4 -m 'my version 1.4'

**search for tags**
git tag -l 'v3.2.7*'

**delete branch on origin**
 git push --delete origin branch_name

***** imp links *****
http://stackoverflow.com/questions/4114095/[[http://stackoverflow.com/questions/4114095/revert-to-a-previous-git-commit|revert]][[-to-a-previous-git-commit]]
fundamentals of git: http://stackoverflow.com/questions/3329943/git-branch-fork-fetch-merge-rebase-and-clone-what-are-the-differences/9204499#9204499


