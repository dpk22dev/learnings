Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2015-06-01T11:59:56+05:30

====== linux ======
Created Monday 01 June 2015

hacking kernel:
http://www.linuxfromscratch.org/
https://github.com/petersenna/Kernel/wiki/How-to-start-Linux-Kernel-development

read:
linux kernel development : robert love
understanding linux kernel
linux device drivers

for checking sytem logs:
gnome-system-log

https://unix.stackexchange.com/questions/84069/what-is-a-device-controller-and-where-does-it-fit-in-between-the-kernel-and-the

**compilation, loading + linking and good stuff**
http://www.tenouk.com/cncplusplusbufferoverflow.html

upstart is for linux

lvs: linux virtual server is used for load balancing among services

notes: unix network programming volume 2, w. richard stevens
IPC:
pipe, fifo, system V message queue, posix message queue

book on linux internals:
http://www.makelinux.net/ldd3/?u=chp-5-sect-3

interactive links to different sub systems of linux
http://www.makelinux.net/kernel_map/

**directory wise disk usage**
du -sh * // directory wise space
df -h . // free space availabe
du -h | less // directory wise space for readablitiy

**policy vs mechanism**
Most programming problems can indeed be split into two parts: 
“what capabilities are to be provided” (the mechanism) and
“how those capabilities can be used” (the policy).

**synchronizations**
http://stackoverflow.com/questions/2332765/lock-mutex-semaphore-whats-the-difference

spinlocks:
http://stackoverflow.com/questions/1957398/what-exactly-are-spin-locks
http://www.linuxinternals.org/blog/2014/05/07/spinlock-implementation-in-linux-kernel/s
eg: t1 acquires spin lock on core1, t2 will keep on looping on core2 untill t1 doesn't release lock. in single core machine spin-lock is simply disabling interrupts to avoid reschedule by kernel.


https://unix.stackexchange.com/questions/45913/is-there-a-way-to-redirect-nohup-output-to-a-log-file-other-than-nohup-out

mutex:
if t1 has acquired mutex on resource, t2 will go to sleep if it asks for. when t1 has released mutex and t2 gets rescheduled by OS, it can acquire mutex.

semaphore:
allows access to group of threads to shared resource.

mutex vs semaphore:
mutex is object owned by thread, allow only one resource to access resource.
semaphore is signalling mechanism. it allows a number of threads to access shared resource.

synchronisation:
system V semaphores were added for synchronization of system V shared memory
posix semaphores were added for synchronization of posix shared memory
mutex and conditional variables: for threads but can  be used for process synchronizaiton
read-write lock

there is difference as system V semaphore, shared memory is kernel persistence while posix semaphore and shared memory is kernel persistent but can be filesystem persistence; but processes don't survive reboot also performance impact, its bad to choose filesystem persistence

for communication using PIPE or FIFO IPCObject is shared among processes
as the book describes there are various effects of fork, exec and _exit on various descriptors used for IPC as depicted in table

Processes operate exclusively in the user address space (i.e., in unprotected mode) of a processor, where they can access only the memory section allocated to them. An attempt to access memory sections of other processes or the kernel address space leads to an exception, which has to be dealt with by the kernel.
When a process wants to access devices or use a functionality of the operating-system kernel, it has to use a system call to do this. A system call causes the processor to change to the protected mode, and access to the kernel address space is a function of the system call. All devices and memory sections can be accessed in protected mode, but only with methods of the kernel.

linux doesn't take microkernel approach, it uses monolithic. modules are added/removed at runtime. this is similar to micro-kernel approach except, modules run in kernel mode in this case.

SoC ( system on chip) cpu with mmu, mm controller, tlb. ALU consults mmu which consults tlb and mmc. mmc gets from memory.

An **ISO image** file is a snapshot of the data and layout of a CD or DVD, saved in ISO-9660 format.

**dpkg vs apt**
dpkg and apt are both package manager, but apt is more advanced. dpkg doesn't installs dependencies, but apt does.

**lsblk**: for getting list of block devices attached to machine
linux thinks that disk attached has multiple partitions, it gives access to disk and its partitions using [[/dev/sda]] names
it understands data-structure handling the filestructure on disk, ie filesystem.
it also has names for showing on list i.e. label

it has maj:min for identifying device for device drivers, Traditionally, the major number identifies the driver associated with the device. The minor number is used by the kernel to determine exactly which device is being referred to. Depending on how your driver is written (as we will see below), you can either get a direct pointer to your device from the kernel, or you can use the minor number yourself as an index into a local array of devices.	
**major-minor number of device driver:**
The major number identifies the driver of a device. The major number can be specified when you register a device driver, but it has to be unique. we can ask kernel to assign also. The minor number is used to distinguish different devices used by the same driver. In Linux, a
device driver can control more than one device, if the driver is designed as a reentrant driver.

it has uuid for identifying disk: The Universally Unique Identifier can be used to identify a device independent form its mount point or device name. This is more and more important as many devices today support hot-plugging or are external anyway. Therefore it makes sometimes sense to access a device (for example in fstab) not by device name but by the UUID.

it has knowledge where partition is mounted in filesystem heirarchy

it looks like #software runnable threads should be equal to #hardware threads, if s/w threads are way much h/w threads problems may occur. blocked threads don't count.

what cpu does during DMA
during ISA bus, cpu couldn't do much except interrupt handling and some h/w checks etc... but PCI doesn't have concept of DMA. it has bus mastering. memory, io devices can master bus for some time. memory has higher bandwidth than io. so fair amount of time is available for cpu + it can still access cache.
http://stackoverflow.com/questions/5150719/direct-memory-access-dma-how-does-it-work

can multiple cores access same memory at same time
this shows us we should be careful about architecture of cpu, bus and type of task we are planning to acheive maximum output from machine
http://programmers.stackexchange.com/questions/183686/can-multiple-cpus-cores-access-the-same-ram-simutaneously

**ssd problems**:
https://en.wikipedia.org/wiki/Write_amplification

**asynchronous vs non-blocking io**
http://blog.omega-prime.co.uk/?p=155

**process vs threads under linux**
there is no distinction except, level of sharing of resources among threads. everything is almost thread
http://stackoverflow.com/questions/807506/threads-vs-processes-in-linux

**multicore processing**
https://www.cs.cmu.edu/~fp/courses/15213-s06/lectures/27-multicore.pdf
simultaneous multithreading can happen in single core, single processor. instructions from two independent threads can execute in single core's different functional branches. cores can be SMT enabled or not.
2,4 or 8 simultaneous threads on single core, intel calling them hyperthreads. cache is private as well as shared among cores. this can cause cache coherence problem. solution: invalidation-based protocol with snooping

logical volume management instead of gparted
https://wiki.ubuntu.com/Lvm
disabling lvm cache
https://askubuntu.com/questions/767140/lvmetad-is-not-active-yet

screen : sharing screen across users:
http://wiki.networksecuritytoolkit.org/index.php/HowTo_Share_A_Terminal_Session_Using_Screen
http://aperiodic.net/screen/quick_reference

**perf**
http://www.tecmint.com/perf-performance-monitoring-and-analysis-tool-for-linux/

**memory management**
https://www.youtube.com/watch?v=EWwfMM2AW9g

**debugger**
https://www.youtube.com/watch?v=N1QSEY1El9o

**debugging sound in ubuntu**
https://help.ubuntu.com/community/SoundTroubleshooting

why [[/run]] and [[/var/run:]]
http://askubuntu.com/questions/57297/why-has-var-run-been-migrated-to-run
http://askubuntu.com/questions/303120/how-folders-created-in-var-run-on-each-reboot

lshw

**how to mount device disk and debugging**
http://unix.stackexchange.com/questions/18925/how-to-mount-a-device-in-linux
http://unix.stackexchange.com/questions/178638/eject-safely-remove-vs-umount

fdisk -l  // find out device name
mount /dev/disk1 /mnt
umount /dev/disk1

we can mount using device id or path using 
mount /dev/disk/by-id{by-path etc...} /mnt

lsblk, lsusb
dmesg | grep -i usb should help

partition changes on disk
fdisk

creating filesystem on **disk partition**
mkfs.ext4 /dev/sdb1

zero out disk
sudo dd if=/dev/zero of=/dev/sdb bs=4M

eject /dev/sdb //to eject drive

we can also use following to mount/unmount or power-off device
udisksctl unmount -b /dev/sdb1
udisksctl power-off -b /dev/sdb
udisksctl info -b /dev/sdb // gives info about device

* linux kernel development ******
don't use c standard libs function. most of function exported by kernel are in include/linux, include/asm directories can be used

asm/current.h : current process
linux/sched.h : schedular option

kernel stack is small in size, don't use auto variables, instead use heap

The __init token is a hint to the kernel that the given function is used only at initialization time. The module loader drops the initialization function after the module is loaded, making its memory available for other uses.

driver numbers:
Modern Linux kernels allow multiple drivers to share major numbers, but most devices that you will see are still organized on the one-major-one-driver principle. The minor number is used by the kernel to determine exactly which device is being referred to.

maximum number of ports:
http://stackoverflow.com/questions/410616/increasing-the-maximum-number-of-tcp-ip-connections-in-linux

Not all critical sections are the same, so the kernel provides different primitives for different needs. 
latency requirements
interrupts
is it possible to sleep
are other resources hold by process

binary semaphores are mutexes
asm/sem: semaphore used for mutexes
linux/rwsem: enabling parallel reading in sem; priority is given to writers causing reader starvation, used where writes are rare

for waiting on completion of other task, using semaphore is not good

Sleeps should not happen in spin locks; writing code that will execute under a spinlock requires paying attention to every function that you call.

**advantages of read write spin locks:**
http://stackoverflow.com/questions/32096928/the-advantages-of-read-lock-and-write-lock

**order of acquiring locks**
when multiple locks must be acquired, they should always be acquired in the same order. If you must obtain a lock that is local to your code (a device lock, say) along with a lock belonging to a more central part of the kernel, take your lock first. If you have a combination of semaphores and spinlocks, you must, of course, obtain the semaphore(s) first; calling down (which can sleep) while holding a spinlock is a serious error.

**major and minor numbers for devices**
http://unix.stackexchange.com/questions/315186/how-does-the-linux-kernel-know-device-major-and-minor-numbers
http://unix.stackexchange.com/questions/197688/are-driver-modules-loaded-and-unloaded-automatically/197786#197786
http://stackoverflow.com/questions/14583183/the-role-of-major-and-minor-numbers-in-device-driver?rq=1
http://stackoverflow.com/questions/12564824/use-of-major-and-minor-device-numbers

**about PCI bus**
Each PCI peripheral is identified by a bus number, a device number, and a function
number. The PCI specification permits a single system to host up to 256 buses, but
because 256 buses are not sufficient for many large systems, Linux now supports PCI
domains. Each PCI domain can host up to 256 buses. Each bus hosts up to 32
devices, and each device can be a multifunction board (such as an audio device with
an accompanying CD-ROM drive) with a maximum of eight functions. Therefore,
each function can be identified at hardware level by a 16-bit address, or key

There are three different types of tty drivers: console, serial port, and pty.

**terminologies:**
http://superuser.com/questions/149100/relation-between-controllers-interfaces-adapt-cards-chipsets-buses

**what language bios is written**
http://softwareengineering.stackexchange.com/questions/298628/which-language-is-a-bios-written-in

**is bios run on cpu**
http://cs.stackexchange.com/questions/29117/does-the-bios-run-on-the-cpu

**practical booting of linux**
https://0xax.gitbooks.io/linux-insides/content/Booting/

**udev**
https://wiki.debian.org/udev
http://www.reactivated.net/writing_udev_rules.html

sar commands
https://www.linuxtechi.com/generate-cpu-memory-io-report-sar-command/

********** todo **********
watch linux videos: https://www.youtube.com/channel/UCkefXKtInZ9PLsoGRtml2FQ
udev: https://www.linux.com/news/udev-introduction-device-management-modern-linux-system
read man udev, sysctl
read ubuntu server guide after: DM multipath
https://www.youtube.com/watch?v=EWwfMM2AW9g
http://www.ru.j-npcs.org/usoft/WWW/HOWTO/mini/IO-Port-Programming : linux ioport programming 
iit bus structure: https://www.youtube.com/watch?v=46ijB39f3Hk
https://www.youtube.com/channel/UCkefXKtInZ9PLsoGRtml2FQ
list of linux kernel system calls


*********** questions  *****
in case of io does all threads on all processors are waiting for bus? 
yes
is bus locked in case of DMA also?
dma is dead. it used to be yes
meaning of each parameter:
after running lshw
 resources: irq:126 memory:c0000000-c0ffffff memory:b0000000-bfffffff ioport:4000(size=64)

read
documentation/kbuild
linux/module, moduleparam, errno.h


why complete was introduced instead of semaphore
ioctl system call

jiffies vs ticks
how kernel maintains cpu affinity
why export_symbol is used after funciton name
download ldd source code examples
schedule vs yield
how os comes to know about devices
why sysfs is favoured instead of proc
writing firmware,
firmware vs device driver
how firmware tells os about devices
what is scatter/gather io

