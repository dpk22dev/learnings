Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2016-07-03T18:00:47+05:30

====== life-hack ======
Created Sunday 03 July 2016

persistence and focus: stick with problem, find ways to solve it. starting is easy, finishing is important.

**todo**
go for hacking, tracking, attend sessions, fun activities, goto friends and discuss
try doing course in courseera or udemy
check category wise android, chrome apps and what problems are they solving
take good diet and good food, care of health
make connections
improve and use english
learn and try to memorize dohe, songs, poems, gazal, jokes, shayari

**nice thought about what todo in life**
https://www.quora.com/What-are-the-five-most-important-things-for-a-man-to-learn-in-life

**problem solving:**
first step should be to identify:
what we want
what is currently happening & why
what changes should be made â€” discussion is good
then we can make changes and analyse results

there should be history wise pattern for technology. why is this technology this way. what was the original problem? what were proposed solutions? why this solution [[only? what]] were the problems faced and solutions for those micro-problems? 
today we learn technology but we lack the experience of creating that technology. if we know the background problem and possible solutions. we can better understand the **concepts** of technology and use those concepts to solve another problem.

understanding new technologies should be fast. generally we understand basic part but difficult parts make us to lack concept clearing. google search for tutorials and blogs is good for basic understanding, stack-overflow is good for clearing doubts. but diagrams, cartoon, video on youtube help us to better understand concepts. problem with most videos is that they don't take history as part; history teaches us the problem, various solutions, best chosen solution, improvements in those solutions. this timelines can help us to understand concepts rather than just technology.

**Me time** is important. sometimes we don't know that we know the answers. we just need to connect the dots of experience knowledge. 


start building prototype with tools and frameworks you know best, then you know your needs, then after research we can pick tools better.

steps to understand new code:
1) get mentor
2) get high level overview
	 - make list of tools, framework, library
3) do quest
4) don't get stuck - 15min, may be timer
5) code review - important


**quotes**
when people are scared be greedy, when people are greedy be scared.

**memes & vines:**
http://www.digitaltrends.com/social-media/how-to-make-your-own-meme/
https://pixlr.com/editor/
http://imgur.com/memegen/
https://imgflip.com/memegenerator



don't read all of framework at once. read few things, do practical, read more things.... it has never been good to read all everything at once.
