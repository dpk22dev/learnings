Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2016-06-16T07:56:59+05:30

====== databases ======
Created Thursday 16 June 2016

**fiddling**
http://sqlfiddle.com/#!2/359ac

The relational algebra is pro-cedural, whereas the tuple relational calculus and domain relational calculus are
nonprocedural.

distributed database design
https://medium.com/databasss/on-disk-io-part-3-lsm-trees-8b2da218496f

**types of databases**:
https://www.digitalocean.com/community/tutorials/understanding-sql-and-nosql-databases-and-different-database-models
databases use model whcih are basically schema or schemaless.
most popular in schema modeled databases is relational database which uses table for logically store info. eg: mysql, mssql, oracle. but they follow SQL standards. so they are SQL databases. it is due to this underlying schema they have additional checks and keep dataa in good shape.
in memory 

databases whcih don;t need schema like redis, mongodb, cassandra, neo4j are nosql( as they don't follow any SQL standard). they don't need schema to be predefined. various checks are omitted. 

any of modeled database can
https://www.thoughtworks.com/insights/blog/nosql-databases-overview

db schema designs
http://www.databaseanswers.org/data_models/

  ************
************************************ mysql ******************************************
  ************
mysql internals:
https://dev.mysql.com/doc/internals/en/

**Database design:**
while designinig database, for uniqueness of two or more coloumns we can use md5 of them as store 

if insertion is less we can create unique key on multiple coloumns but as table size increases insertion will get too slower, but we can have performance in selection
key should be less than 188 chars so be careful while make url as key
eg: comp_id, md5( ip:useragent ), date

we can shard db, create tables acc to say blog_id if there is no join these tables can be put on different databases. if there asre joins either create single table 
eg: naukM_2_stat, naukM_3_stat vs naukM_stat

never add count coloumns to table eg: mobcount, desktopcount, its not good from scalability point of view instead put system, os, browser coloumns
we can count acc to these entries
also we can combine them in single key eg: pid can be combination of page:referar:system:browser, but we have to use substring while querying table in this case
eg: comp_id, date, pid( page, referer ), count, system

if key size is getting bigger say more than 180 then use __md5 of coloumns can be used as primary key__
while designing db/table think of unique key as coloumns ( or combination of coloumns ) whose value we don't want to repeat
if we are using primary-key, unique-key; both of them should not  be violated, if anyone of them is violated data won't be inserted or updated
â€” so think what you would do ( on duplicate key ) scenario in insert, update or delete cases

although join look similar to subquery, but they can be faster if on coloumn is indexed

why we need primary key when unique key is there:
because unique key can be null
its good to able to uniquely identify rows in table, when designing  a table find out group of key which uniquely identify table => these are superkeys; we select minimal group of coloumns => candidate key; chosen candidate key as primary key and remaining set of candidate key aer alternate keys

if coloumn A has null values, adding unique constraint doesn't complain as mysql thinks null can be anything, null is not equal to null, this query will pass
but if coloumn has equal data this query will fail


********** connecting mssql on linux *************
http://stackoverflow.com/questions/33341510/how-to-install-freetds-in-linux

tsql -H 192.168.33.204 -U nbtdev -P DevNBT@2016! -p 1433 > out.csv <<EOS SELECT * FROM some_table; go EOS

  ********

most common used nosql dbs
https://bigdata-madesimple.com/18-free-and-widely-used-open-source-nosql-databases/

comparison of various databases with specs
https://kkovacs.eu/cassandra-vs-mongodb-vs-couchdb-vs-redis

******** questions *****
diff b/w json and bson, why not store simply as json string
why different data-types
in 2PC/3phase commit what happens if replicas commit and ack returned is lost
how does transations happens on replicas, does locking happens over there

~~how schema should be desinged in document store~~
diff between different document stores
how column family store is different than document store
	i guess document store still stores row by row; but column family stores all columns together making aggs better
diff between different column family stores
how graph dbs store data on disk
give thoughts on multi dim data like adv to pub mapping


if row is inserted on indexed column, is it more expensive
	for large table, index needs to be calculated and b tree needs to be adjusted on disk
how is cassandra faster and than mysql, 
	its not faster per say, but storing columns together gives adv on operations on multiple columns; append only sequential writes makes writes faster
in which scenarios cassandra is better
	data needs to be stored based on query; if column related queries are heavier
can we change partition key later on which basis should it be done
	~~most of dbs don't provide that; but need to verify on ~~
	
	
	
