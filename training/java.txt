Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2016-04-21T11:51:39+05:30

====== java ======
Created Thursday 21 April 2016

cheatsheet
https://introcs.cs.princeton.edu/java/11cheatsheet/

{{./pasted_image.png}}

— 

{{./pasted_image001.png}}


**package tree**
https://docs.oracle.com/javase/7/docs/api/java/util/package-tree.html

**which collection should i use:**
http://stackoverflow.com/questions/21974361/what-java-collection-should-i-us

eclipse shortcuts:
https://dzone.com/articles/effective-eclipse-shortcut-key

**versioning:**
http://stackoverflow.com/questions/275555/maven-snapshot-repository-vs-release-repository
http://stackoverflow.com/questions/2107484/what-is-the-difference-between-ga-rc-and-m2-release

mvn -Declipse.workspace="/home/dpk/eclipse-workspace" [[eclipse:configure-workspace]]

**running java app in debug mode**
java -Xdebug -Xrunjdwp:server=y,transport=dt_socket,address=8000,suspend=n \
	   -jar target/myapplication-0.0.1-SNAPSHOT.jar

**java hotspot client vs server compiler**
https://stackoverflow.com/questions/29342861/java-difference-between-java-hotspot-server-compiler-and-client-compiler

**DCL is broken**
https://www.javaworld.com/article/2074979/java-concurrency/double-checked-locking--clever--but-broken.html

**jar vs war vs ear**
https://stackoverflow.com/questions/1594667/war-vs-ear-file

**java specs**
https://docs.oracle.com/javase/specs/index.html
java7 specs: https://docs.oracle.com/javase/specs/jls/se7/jls7.pdf
java7 vm specs: https://docs.oracle.com/javase/specs/jvms/se7/html/index.html

**setup spring**
install gradle using sdkman
source "/home/dpk/.sdkman/bin/sdkman-init.sh"
sdk  install gradle
sdk install springboot

**spring docs**
https://docs.spring.io/spring/docs/5.0.5.BUILD-SNAPSHOT/spring-framework-reference/index.html

**short mvn tutorial**
https://maven.apache.org/guides/getting-started/maven-in-five-minutes.html
https://www.youtube.com/watch?v=0CFWeVgzsqY
mvn -X clean install
mvn effective:pom
mvn tomcat:run
 mvn help:effective-settings
mvn [[archetype:help]]
mvn [[archetype:help|archetype:generate]]

**gradle **
http://www.vogella.com/tutorials/EclipseGradle/article.html

**diff b/w enumerator and iterator**
Using Enumeration, you can only traverse the Collection object. But using Iterator, you can also remove an element while traversing the Collection. 
enums in depth: https://howtodoinjava.com/java/enum/guide-for-understanding-enum-in-java/

**understanding concurrency and locks**
https://dzone.com/articles/java-concurrency-in-depth-part-1
https://dzone.com/articles/intricacies-of-multi-threading-in-java?fromrel=true

**Why Functional Interfaces in Java 8 have one Abstract Method?**
Functional Interface lets us call an object as if it were a function, which lets us pass verbs(functions) around our program rather than nouns(objects). Implementations of Functional Interface perform a single well-defined action, as any method should, with a name like run, execute, perform, apply, or some other generic verb

**streams **
http://winterbe.com/posts/2014/03/16/java-8-tutorial/
http://winterbe.com/posts/2014/07/31/java8-stream-tutorial-examples/
https://zeroturnaround.com/rebellabs/java-8-streams-cheat-sheet/
http://files.zeroturnaround.com/pdf/zt_java8_streams_cheat_sheet.pdf


**blocking vs nonblocking vs async**
https://stackoverflow.com/questions/2625493/asynchronous-vs-non-blocking


https://stackoverflow.com/questions/1036754/difference-between-wait-and-sleep

**fail fast  vs fail safe**
http://javaconceptoftheday.com/fail-fast-and-fail-safe-iterators-in-java-with-examples/
fail-fast: shutdown immed on error
fail-safe: don't stop even on error occur

**maven repo**
http://search.maven.org/

**java io package overview**
http://tutorials.jenkov.com/java-io/overview.html

**comparable in java generics**
https://stackoverflow.com/questions/5013947/create-a-compareto-to-a-generic-class-that-implements-comparable

**dumping whole array**
 Arrays.toString(arr) or Arrays.deepToString(arr)	

Integer arr = new Integer[10]; // is initialised with null instead of 0

while cloning, single dimensional array is deep copied,  but mutliple dimensional array is shallow copies: means under-lying low dimensional arrays are refrences to original sub arrays

constant pool: stores int, float, string constants in class file
string pool: stores strings in heap; strings are interned in weak hashmap with string object to string object

https://stackoverflow.com/questions/215497/what-is-the-difference-between-public-protected-package-private-and-private-in
private / protected cant be used in top level class: internally allowed, internally they can be extended too
public class needs to be put in same filename
multiple default classes can be put in single, they sould have main methods and will be compiled to multiple class files
https://stackoverflow.com/questions/3491131/multiple-classes-in-a-single-file-modifier-private-not-allowed-here

for static, final, private java uses static binding; overridden methods will not be given priority
https://www.geeksforgeeks.org/static-vs-dynamic-binding-in-java/
dynamic binding method will be called based on type on object not based on reference
https://www.quora.com/How-does-JVM-handle-the-method-overriding-internally-during-the-runtime-Are-there-any-performance-implications-of-the-same
https://stackoverflow.com/questions/21504726/static-block-vs-initializer-block-vs-constructor-in-inheritance

curl kind of request in java
https://stackoverflow.com/questions/2793150/how-to-use-java-net-urlconnection-to-fire-and-handle-http-requests

java performance, internals
https://www.dynatrace.com/resources/ebooks/javabook/

**non blocking in java**
https://stackoverflow.com/questions/2824225/what-is-non-blocking-concurrency-and-how-is-it-different-than-normal-concurren

**using pair in java**
https://www.geeksforgeeks.org/pair-class-in-java/
AbstractMap.SimpleEntry<Integer, String> entry = new AbstractMap.SimpleEntry<>(1, "one");
Integer key = entry.getKey();
String value = entry.getValue();

AbstractMap.SimpleImmutableEntry<Integer, String> entry = new AbstractMap.SimpleImmutableEntry<>(1, "one");

permutaions of array 
https://stackoverflow.com/questions/24460480/permutation-of-an-arraylist-of-numbers-using-recursion

**inner vs static inner class java**
https://www.geeksforgeeks.org/static-class-in-java/
https://stackoverflow.com/questions/253492/static-nested-class-in-java-why
https://javarevisited.blogspot.com/2012/12/inner-class-and-nested-static-class-in-java-difference.html

https://stackoverflow.com/questions/21974361/what-java-collection-should-i-use
arraylist: dynamic array, indexed so insertion/updation O(n), search O(1); not thread safe
vector: dynamic array,  use it instead of arraylist when thread safety is concern
linkedlist: doubly linked list insertion/updation O(1), search O(n)
hashmap: unordered key-value pair
treemap: RB tree; sorted key-value pair
LinkedHashMap: hashtable with linked list implementation; insertion order is maintained
Hashset: set backed by hashmap: insertion, contains, updation O(1); unordered
LinkedHashSet: set backed by LinkedHashMap; order of insertion is maintained
Treeset: set backed by treemap; insertion, contains, updation O(logn); ordered
LinkedList: FIFO
ArrayDeque: arraylist based deque

**role of each jar in jre system library**
https://stackoverflow.com/questions/34890981/what-role-each-jar-in-jre-system-library?rq=1

**hashcode vs equals for equality of objects in java**
https://dzone.com/articles/working-with-hashcode-and-equals-in-java

**default access specifier**
https://stackoverflow.com/questions/3530065/which-is-the-default-access-specifier-in-java

**specifications**
https://jcp.org/en/jsr/detail?id=340

**good interview questions**
https://drive.google.com/file/d/0B8KENIDghuHAR05fTGk4YUg0RUk/view

**reads**
https://javarevisited.blogspot.com/?merchantID=53701

jpa spring-jpa
http://www.in28minutes.com/jpa-hibernate-tutorial-for-beginners
https://www.objectdb.com/api/java/jpa jpa reference

h2 db runs at: http://localhost:8080/h2-console

**references**
https://www.youtube.com/user/javaboynavin/playlists

**interview questions links**
https://javarevisited.blogspot.com/2015/10/133-java-interview-questions-answers-from-last-5-years.html
https://javarevisited.blogspot.com/2018/07/top-30-java-phone-interview-questions.html#more
https://javarevisited.blogspot.com/2014/07/top-50-java-multithreading-interview-questions-answers.html

synchronized in detail
https://stackoverflow.com/questions/2779484/why-must-wait-always-be-in-synchronized-block
Today, your first choice should be atomic variable, followed by volatile variable if your synchronization requirement is satisfied by using them. Only if you need mutual exclusion you can consider using ReentrantLock followed by plain old synchronized keyword.
synchronized block ensures that variable is read from memory instead of cache

using unsafe class can be used for operations on native memory

volatile solves **visibility problem**, value written by one thread becomes visisble to other thread now; atomicInteger solves **synchronization problem**: eg i++ becomes atomic
writing to normal long, double is not atomic, volatile ensures this atomicity plus writes written by one thread are visible to other threads; but doesn't stop two trheads to read same value and doing i++, this operaation is not atomic, for this we need to use atomic
https://stackoverflow.com/questions/19744508/volatile-vs-atomic

latch vs barrier: Latches are for waiting for events; barriers are for waiting for other threads

java 8 collectors
https://www.baeldung.com/java-8-collectors
creating custom collector
http://www.deadcoderising.com/2017-03-07-java-8-creating-a-custom-collector-for-your-stream/

spurious wakeups in java
http://opensourceforgeeks.blogspot.com/2014/08/spurious-wakeups-in-java-and-how-to.html

**java multithreading**
https://www.ibm.com/developerworks/java/tutorials/j-threads/j-threads.html
https://howtodoinjava.com/java-concurrency-tutorial/
http://tutorials.jenkov.com/java-concurrency/index.html
http://tutorials.jenkov.com/java-util-concurrent/index.html
https://www.youtube.com/channel/UCiz26UeGvcTy4_M3Zhgk7FQ/playlists

other concurrency resources:
https://docs.oracle.com/javase/tutorial/essential/concurrency/
https://baptiste-wicht.com/posts/2010/05/java-concurrency-part-1-threads.html
http://www.periodicooficial.oaxaca.gob.mx/files/2011/05/EXT02-2011-05-19.pdf

concurrency vs parallelism
Concurrency means multiple tasks which start, run, and complete in overlapping time periods, in no specific order. Parallelism is when multiple tasks OR several part of a unique task literally run at the same time, e.g. on a multi-core processor. 
https://howtodoinjava.com/core-java/multi-threading/concurrency-vs-parallelism/
http://www.vogella.com/tutorials/JavaConcurrency/article.html

cleaning thread locals
https://stackoverflow.com/questions/3869026/how-to-clean-up-threadlocals

finding currently running java threads: use jps, jstack
https://stackoverflow.com/questions/9934517/how-to-find-a-java-thread-running-on-linux-with-ps-axl

tuning java on VM
https://www.youtube.com/watch?v=zwBLgQ1_WuE

troubleshooting java application: comparison of tools jmap, jhat, jconsole, jvisual, new relic
https://www.youtube.com/watch?v=mzT7etWjj0Q
use [[--XX:dumpHeapOnOOM]] to generate heapdump
jmap : prints memory map of java running process,
jhat: reads heap dumps, needs size equivalent of your heap dump: increase mem space for running it
JVisualVM: attaches to local/remote running process, provide heap dump, memory leaks, gc monitoring, CPU profiling
jstack: attaches to running process, thread dump of java process
JConsole: shows jmx metrics for local/remote process if enabled in app. timespan based, more complex

heap analylsis:
https://www.javaworld.com/article/2072864/heap-dump-and-analysis-with-visualvm.html
JMX server gets metrics info from mbeans, Jconsole connect to JMX server to show info/change mbeans behaviour. JvisualVM can install jconsole as extension for above functionality.

**questions**
https://stackoverflow.com/search?q=core+java
why jsp is better than servlet
~~in hibernate what if we want to change things lijke~~
	~~way of id generation~~
	discriminator fields/
	what will happen in case of multiple keys as primarykey
	in case of sharded tables
	difference b/w bag and set in hbm
	if we have to create indexes on few coloumns lateron
	how will it effect refactoring and vice versa
	~~how are joins handled?~~
~~Runner.java is not running~~
~~new Thread() { public void run() {} } , instantiating interface like new Runnable(){} and passing it to new Thread ?~~
~~why classType are used. eg myClass.class~~
~~java perf diff b/w primitive and non-primitive tyeps: int vs Integer	~~
public static <T> T addAndReturn(T element,
? in genereics
	public static **<T> Spliterator<T> **spliterator(Iterator<? extends T> iterator,
												 long size,
												 int characteristics) {
		return new IteratorSpliterator<>(Objects.requireNonNull(iterator), size,
										 characteristics);
	}

containsvalue is not returning correct result
	complex ds treemap of treemap etc comparison, even looping is hard : how to handle them

~~is static inner class object created with each instance of outer class	~~
no they have to be instantiated expliciterly, they are just way of encapsulating related class

how gradle works, what changes to make if something changes
what are different containers app servers: tomcat etc
~~diff b/w blocking and non-blocking code~~
~~default java thread pool~~
~~use of synchronised vs use of lock~~
why fork-join is there
~~java what happens when thread is blocked~~
~~do java level threads correspond to processor level threads .. how is it implemented~~
~~diff b/s sleep vs block~~
how much of synchronization and threads used in real applications
java se/me specification vs JIT vs JVM specificaiton 
how stack map frame and code linking happens in jvm .class
filename, classname working in java
default modifier in java: package private
is class private because of private constructor
analysing javap output
what are different java binaries are useful for
does jvm uses JNI to language's file i/o; interact with syscalls
Predicate<String> isEmptyP = String::isEmpty; ← how is it possible, isEmpty works on string object; is object really created
how streams are internally implemented, benefit of using functional prog/streams
	splititerator, divide and conquer
diff b/w error, exception; checked vs unchecked exception
how biginteger and bigdecimal are really stored
why long sum = 0L;
sum += (long)(ia) * (ic);  overflows but casting to long doesn't

CustomBlockQ  can we synchronize on this, q.wait
threadlocalex why static method is giving correct output
castingex casting concepts are not clear

~~why :: in below~~
~~Stream.of(arr)~~
	~~.forEach( System.out::println );~~
~~asList method working: why internal implem works with a~~
~~.toArray(Integer[]::new);~~
~~while using streams can we get stuck, where can't get out of~~
~~diff b/w ~~
~~.collect( Collectors.toList() );~~
~~.collect( Collectors.toCollection(HashSet::new) )~~
~~Stream<String> sb = Stream.<String>builder().add("5").build();~~
~~custom collector~~
~~https://howtodoinjava.com/java-concurrency-tutorial/~~
~~after wait-notify~~

linkedlist of hashmap
unsafe.get unsafe meaaning in atomic classes
why marker interfaces like cloneable, serializable are used
how sleep, wait notify natively implemented and how their excpeitons can be thrown in c and caugth in java
/apps/my-builds/java/code101/src$ java code101.DumpOne -Xms6M -Xmx16M -XX:MaxPermSize=1G -XX:PermSize=512M why not getting out of memory
is is necessary to know every bin/ or some are enough, remote debugging/profiling how is it done

fairlock code: http://tutorials.jenkov.com/java-concurrency/starvation-and-fairness.html
why queue object is used?
diff b/w spring boot app running as jar vs running in inbuilt tomcat

**todo**
~~after https://www.javatpoint.com/ioc-container~~
https://drive.google.com/file/d/0B8KENIDghuHAR05fTGk4YUg0RUk/view
https://github.com/in28minutes/interview-guide
https://drive.google.com/file/d/0B8KENIDghuHAR05fTGk4YUg0RUk/view 144
~~hibernate~~
~~about concurrent classes~~

~~java lang~~
~~design patterns~~
~~guides~~
~~spring pdf~~
java nio
pattern matching
understand fairness lock code
heap dump analyliss tutorial: analyse deadlock with it
why its not 

**books to read**
effective java: josua bloch
	till 94
java concurrency in practice
	till 179
clean code - robert c martin
sping in action
 after chap 2 only in free time

jenkov tutorials
https://javarevisited.blogspot.com/2015/10/133-java-interview-questions-answers-from-last-5-years.html
till 82 -  101
https://javarevisited.blogspot.com/2014/07/top-50-java-multithreading-interview-questions-answers.html
12

https://www.hackerrank.com/interview/interview-preparation-kit



specs 10:
	chap5 conversions
	annotaiotn 285/311
	arrays
	exception
	execution
	threads and lock 563
jvm specs:
	go through after 32
java concurrency in practice - brian goetz
read after http://tutorials.jenkov.com/java-concurrency/locks.html
http://tutorials.jenkov.com/java-util-concurrent/index.html

**code try**
bitwise ops
~~floats, chars in depth~~
~~experiments with collections array, complex data structure insert/update/delete/search/ equality and comparison, enums: enumsets etc, simple dp questions~~
custom bst: recursive pointers
writing native methods
annotation
floating point calcs
string comparator to incllude string lexi, length

java verify that multiple threads increment same counter using synchronised on this, string object
sort using  multiple threads, merge them using single thread
try map, filter,collect on streams using different ds
throttling threadpool exeecutor
can we connect multiple pipedreaders to single pipedwriter


concurrent questions:
diff b/w join in different loop vs multiple time join
mapping between OS model and jvm model of thread and memory
	jvm process's stack and heap vs thread's stack and heap
	what happens in case of OS paging, specially in case of heaps
http://tutorials.jenkov.com/java-concurrency/volatile.html what good is happens before
how wait/notify implemented nativally
does jvm creates single object using new Object same as done for String str = ""; can it cause problem with notify on waiting
how atomic in java provides safety it just uses native method to write content
why atomicops is giving correct answer
~~why sumthreads is able to access private members~~
why kafka producer is not running
why phaser was introduced

try clone method
https://www.cs.carleton.edu/faculty/dmusican/cs348/java_multi/#sec-1

if joining on multiple threads large thread is 
using same class as entity, Document in two different repository
relations and joins 

for practice:
browser implementation in java
crawler


finalizers may or may not run, exceptions not caught whcih can result in corrupt object state
there is no way to extend instattiable class, add value component while preserving equals contract

Java supports covariant return types: overriding method’s return type can be a	subclass	of the overridden method’s return type.

has it happened that api was changed which broke codes
security flaws in java
what are wrong designs that had to be stuck with
how casting in java works? what happens when object is cast to other






practice:
https://github.com/LeonardoZ/java-concurrency-patterns
https://github.com/Beerkay/JavaMultiThreading


