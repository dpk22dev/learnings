Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2016-04-21T11:51:39+05:30

====== java ======
Created Thursday 21 April 2016

cheatsheet
https://introcs.cs.princeton.edu/java/11cheatsheet/

{{./pasted_image.png}}

— 

{{./pasted_image001.png}}


**package tree**
https://docs.oracle.com/javase/7/docs/api/java/util/package-tree.html

**which collection should i use:**
http://stackoverflow.com/questions/21974361/what-java-collection-should-i-us

eclipse shortcuts:
https://dzone.com/articles/effective-eclipse-shortcut-key

**versioning:**
http://stackoverflow.com/questions/275555/maven-snapshot-repository-vs-release-repository
http://stackoverflow.com/questions/2107484/what-is-the-difference-between-ga-rc-and-m2-release

mvn -Declipse.workspace="/home/dpk/eclipse-workspace" [[eclipse:configure-workspace]]

**running java app in debug mode**
java -Xdebug -Xrunjdwp:server=y,transport=dt_socket,address=8000,suspend=n \
	   -jar target/myapplication-0.0.1-SNAPSHOT.jar

**java hotspot client vs server compiler**
https://stackoverflow.com/questions/29342861/java-difference-between-java-hotspot-server-compiler-and-client-compiler

**DCL is broken**
https://www.javaworld.com/article/2074979/java-concurrency/double-checked-locking--clever--but-broken.html

**jar vs war vs ear**
https://stackoverflow.com/questions/1594667/war-vs-ear-file

**java specs**
https://docs.oracle.com/javase/specs/index.html
java7 specs: https://docs.oracle.com/javase/specs/jls/se7/jls7.pdf
java7 vm specs: https://docs.oracle.com/javase/specs/jvms/se7/html/index.html

**setup spring**
install gradle using sdkman
source "/home/dpk/.sdkman/bin/sdkman-init.sh"
sdk  install gradle
sdk install springboot

**spring docs**
https://docs.spring.io/spring/docs/5.0.5.BUILD-SNAPSHOT/spring-framework-reference/index.html

**short mvn tutorial**
https://maven.apache.org/guides/getting-started/maven-in-five-minutes.html
https://www.youtube.com/watch?v=0CFWeVgzsqY
mvn -X clean install
mvn effective:pom
mvn tomcat:run
 mvn help:effective-settings
mvn [[archetype:help]]
mvn [[archetype:help|archetype:generate]]

**gradle **
http://www.vogella.com/tutorials/EclipseGradle/article.html

**diff b/w enumerator and iterator**
Using Enumeration, you can only traverse the Collection object. But using Iterator, you can also remove an element while traversing the Collection. 

**understanding concurrency and locks**
https://dzone.com/articles/java-concurrency-in-depth-part-1
https://dzone.com/articles/intricacies-of-multi-threading-in-java?fromrel=true

**Why Functional Interfaces in Java 8 have one Abstract Method?**
Functional Interface lets us call an object as if it were a function, which lets us pass verbs(functions) around our program rather than nouns(objects). Implementations of Functional Interface perform a single well-defined action, as any method should, with a name like run, execute, perform, apply, or some other generic verb

**streams **
http://winterbe.com/posts/2014/03/16/java-8-tutorial/
http://winterbe.com/posts/2014/07/31/java8-stream-tutorial-examples/

**blocking vs nonblocking vs async**
https://stackoverflow.com/questions/2625493/asynchronous-vs-non-blocking


https://stackoverflow.com/questions/1036754/difference-between-wait-and-sleep

**fail fast  vs fail safe**
http://javaconceptoftheday.com/fail-fast-and-fail-safe-iterators-in-java-with-examples/

**maven repo**
http://search.maven.org/

**java io package overview**
http://tutorials.jenkov.com/java-io/overview.html

**comparable in java generics**
https://stackoverflow.com/questions/5013947/create-a-compareto-to-a-generic-class-that-implements-comparable

**dumping whole array**
 Arrays.toString(arr) or Arrays.deepToString(arr)	

Integer arr = new Integer[10]; // is initialised with null instead of 0

while cloning, single dimensional array is deep copied,  but mutliple dimensional array is shallow copies: means under-lying low dimensional arrays are refrences to original sub arrays

private / protected cant be used in top level class: internally allowed, internally they can be extended too
public class needs to be put in same filename
multiple default classes can be put in single, they sould have main methods and will be compiled to multiple class files
https://stackoverflow.com/questions/3491131/multiple-classes-in-a-single-file-modifier-private-not-allowed-here

for static, final, private java uses static binding; overridden methods will not be given priority
https://www.geeksforgeeks.org/static-vs-dynamic-binding-in-java/
dynamic binding method will be called based on type on object not based on reference
https://www.quora.com/How-does-JVM-handle-the-method-overriding-internally-during-the-runtime-Are-there-any-performance-implications-of-the-same



**non blocking in java**
https://stackoverflow.com/questions/2824225/what-is-non-blocking-concurrency-and-how-is-it-different-than-normal-concurren

**using pair in java**
https://www.geeksforgeeks.org/pair-class-in-java/
AbstractMap.SimpleEntry<Integer, String> entry = new AbstractMap.SimpleEntry<>(1, "one");
Integer key = entry.getKey();
String value = entry.getValue();

AbstractMap.SimpleImmutableEntry<Integer, String> entry = new AbstractMap.SimpleImmutableEntry<>(1, "one");


**inner vs static inner class java**
https://www.geeksforgeeks.org/static-class-in-java/
https://stackoverflow.com/questions/253492/static-nested-class-in-java-why
https://javarevisited.blogspot.com/2012/12/inner-class-and-nested-static-class-in-java-difference.html

https://stackoverflow.com/questions/21974361/what-java-collection-should-i-use
arraylist: dynamic array, indexed so insertion/updation O(n), search O(1); not thread safe
vector: dynamic array,  use it instead of arraylist when thread safety is concern
linkedlist: doubly linked list insertion/updation O(1), search O(n)
hashmap: unordered key-value pair
treemap: RB tree; sorted key-value pair
LinkedHashMap: hashtable with linked list implementation; insertion order is maintained
Hashset: set backed by hashmap: insertion, contains, updation O(1); unordered
LinkedHashSet: set backed by LinkedHashMap; order of insertion is maintained
Treeset: set backed by treemap; insertion, contains, updation O(logn); ordered
LinkedList: FIFO
ArrayDeque: arraylist based deque

**role of each jar in jre system library**
https://stackoverflow.com/questions/34890981/what-role-each-jar-in-jre-system-library?rq=1

**hashcode vs equals for equality of objects in java**
https://dzone.com/articles/working-with-hashcode-and-equals-in-java

**default access specifier**
https://stackoverflow.com/questions/3530065/which-is-the-default-access-specifier-in-java

**specifications**
https://jcp.org/en/jsr/detail?id=340

**good interview questions**
https://drive.google.com/file/d/0B8KENIDghuHAR05fTGk4YUg0RUk/view

**reads**
https://javarevisited.blogspot.com/?merchantID=53701

**references**
https://www.youtube.com/user/javaboynavin/playlists

**interview questions links**
https://javarevisited.blogspot.com/2015/10/133-java-interview-questions-answers-from-last-5-years.html
https://javarevisited.blogspot.com/2018/07/top-30-java-phone-interview-questions.html#more
https://javarevisited.blogspot.com/2014/07/top-50-java-multithreading-interview-questions-answers.html

synchronized in detail
https://stackoverflow.com/questions/2779484/why-must-wait-always-be-in-synchronized-block
Today, your first choice should be atomic variable, followed by volatile variable if your synchronization requirement is satisfied by using them. Only if you need mutual exclusion you can consider using ReentrantLock followed by plain old synchronized keyword.

java multithreading
https://www.ibm.com/developerworks/java/tutorials/j-threads/j-threads.html
https://howtodoinjava.com/java-concurrency-tutorial/

concurrency vs parallelism
Concurrency means multiple tasks which start, run, and complete in overlapping time periods, in no specific order. Parallelism is when multiple tasks OR several part of a unique task literally run at the same time, e.g. on a multi-core processor. 
https://howtodoinjava.com/core-java/multi-threading/concurrency-vs-parallelism/
http://www.vogella.com/tutorials/JavaConcurrency/article.html

**questions**
https://stackoverflow.com/search?q=core+java
why jsp is better than servlet
~~in hibernate what if we want to change things lijke~~
	~~way of id generation~~
	discriminator fields/
	what will happen in case of multiple keys as primarykey
	in case of sharded tables
	difference b/w bag and set in hbm
	if we have to create indexes on few coloumns lateron
	how will it effect refactoring and vice versa
	~~how are joins handled?~~
~~Runner.java is not running~~
~~new Thread() { public void run() {} } , instantiating interface like new Runnable(){} and passing it to new Thread ?~~
~~why classType are used. eg myClass.class~~
~~java perf diff b/w primitive and non-primitive tyeps: int vs Integer	~~
public static <T> T addAndReturn(T element,
? in genereics
	public static **<T> Spliterator<T> **spliterator(Iterator<? extends T> iterator,
												 long size,
												 int characteristics) {
		return new IteratorSpliterator<>(Objects.requireNonNull(iterator), size,
										 characteristics);
	}

containsvalue is not returning correct result
	complex ds treemap of treemap etc comparison, even looping is hard : how to handle them

~~is static inner class object created with each instance of outer class	~~
no they have to be instantiated expliciterly, they are just way of encapsulating related class

how gradle works, what changes to make if something changes
what are different containers app servers: tomcat etc
~~diff b/w blocking and non-blocking code~~
~~default java thread pool~~
~~use of synchronised vs use of lock~~
why fork-join is there
~~java what happens when thread is blocked~~
~~do java level threads correspond to processor level threads .. how is it implemented~~
~~diff b/s sleep vs block~~
how much of synchronization and threads used in real applications
java se/me specification vs JIT vs JVM specificaiton 
how stack map frame and code linking happens in jvm .class
filename, classname working in java
default modifier in java: package private
is class private because of private constructor
analysing javap output
what are different java binaries are useful for
does jvm uses JNI to language's file i/o; interact with syscalls
Predicate<String> isEmptyP = String::isEmpty; ← how is it possible, isEmpty works on string object; is object really created
how streams are internally implemented, benefit of using functional prog/streams
	splititerator, divide and conquer
diff b/w error, exception; checked vs unchecked exception
how biginteger and bigdecimal are really stored

CustomBlockQ  can we synchronize on this, q.wait
threadlocalex why static method is giving correct output
castingex casting concepts are not clear

https://howtodoinjava.com/java-concurrency-tutorial/
after wait-notify

**todo**
~~after https://www.javatpoint.com/ioc-container~~
https://drive.google.com/file/d/0B8KENIDghuHAR05fTGk4YUg0RUk/view
https://github.com/in28minutes/interview-guide
https://drive.google.com/file/d/0B8KENIDghuHAR05fTGk4YUg0RUk/view 144
~~hibernate~~
~~about concurrent classes~~

~~java lang~~
~~design patterns~~
~~guides~~
~~spring pdf~~
java nio
pattern matching

**books to read**
https://javarevisited.blogspot.com/2015/10/133-java-interview-questions-answers-from-last-5-years.html
till 82 -  101
https://javarevisited.blogspot.com/2014/07/top-50-java-multithreading-interview-questions-answers.html
12

https://www.hackerrank.com/interview/interview-preparation-kit

specs 10:
	chap5 conversions
	annotaiotn 285/311
	arrays
	exception
	execution
	threads and lock 563
jvm specs:
	go through after 32
java concurrency in practice - brian goetz


**code try**
bitwise ops
~~floats, chars in depth~~
~~experiments with collections array, complex data structure insert/update/delete/search/ equality and comparison, enums: enumsets etc, simple dp questions~~
custom bst: recursive pointers
writing native methods
annotation
floating point calcs
