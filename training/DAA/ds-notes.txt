Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2018-08-06T08:27:04+05:30

====== ds-notes ======
Created Monday 06 August 2018

techniques on array 
simple search
sorting & binary search
use hashmap/stack/queue
two pointers: move one behind other, move in expanding opposite direction, move in contracting opposite direction
slow fast pointers
two heaps
subsets
sliding window
merge interval
backtraking
DP if none of above works

if in intermediate step there is some arr of elements; and need for sorting to get result => consider traversing original array from right side, sometimes it saves sorting

while deciding complexity for RxC matrix, take example for 3x3 say, try to find number of calls on each cell. tree will give call on each level, summing them gives the result, eg:
1 + 2 + 4 +..  2^i + .. + 2( R +C -1  ) => O( 2^R+C-1 )

O(n2) -> O(n): keeping two arrays calculated data for left of array and right of array; then loop through each element to compute

when comparing strings rabin-karp based hashcode can be useful; also for just comparing anagrams keeping charater frequency array can do comparison in O(1)

in matrix chain multiplication kind of problems, we can create nxn matrix but don't use first column

sometimes in DP eg: painters problem we jump to 3d array of 2ds, but 2D is enough,
partitioning n tasks into k persons; minimizing over giving 1 to n tasks to 1 person and remaining tasks to k-1 persons
minimizing over giving 1 to n tasks to x persons and remaining tasks to k-x persons, ultimately it boils down to same as above

for representing number on two sides, we can have bit mask on left side, its negate will be on right hand side

for buy/sell stock problem, keeping track of min, maxProfit while going left to right to ith element; keeping track of max, maxProfit while going right to left to ith element can be used to find 2 trades to get max profit

if diff of count of odd bits - count of even bits is multiple of 3 then number is multiple of 3

when asked to print power, multi without using maths, bitwise operators think of using recursion

while using inx after loop can cause IOOB exception, don't rely while( si <= ei ), si can jump out of ei as in quicksort

height vs depth of tree
https://stackoverflow.com/questions/2603692/what-is-the-difference-between-tree-depth-and-height
https://stackoverflow.com/questions/4065439/height-of-a-tree-with-only-one-node

https://www.geeksforgeeks.org/serialize-deserialize-binary-tree/
BST: only preorder/post is suffiecient, as we know position of root, elements smaller than root will form left subtree, greater than root will form rigth subtree
full : means totally full, each node must have 2 nodes except leaf which should have 0 nodes; while storing preorder need bit indicatior for leaf / internal nodes
Complete: level order is enough, 1,2,4,8.. nodes at each level . eg: hea**p**( com**p**lete ), e; last level can be partially filled
full: each node has 0/2 childeren. 
BT: preoder + inorder

BIT tree explanation
https://www.hackerearth.com/practice/data-structures/advanced-data-structures/fenwick-binary-indexed-trees/tutorial/

if we want to update range and find single index value, for update(l,r,val) we can for arr[l]+val, arr[r]-val in O(1) and get(l) : iterate and elements 0->l to get value at l. same logic can be applied to BIT for above type of query

https://www.geeksforgeeks.org/given-an-array-arr-find-the-maximum-j-i-such-that-arrj-arri/
we can use lmin array for storing min element on left side, rmax for max element on right side. then iterating i over lmin, j over rmax; we can find pair(i,j) when diff(i,j) is max

when we need to find path existence from s to d in maze, queue is ok; but when finding shortes path, acc to dijkstra we need priority queue
looping over points in maze:
bool isValid(int row, int col) k{ 
	return (row >= 0) && (row < ROW) && (col >= 0) && (col < COL); 
} 
int rowNum[] = {-1, 0, 0, 1}; 
int colNum[] = {0, -1, 1, 0}; 
  
 for (int i = 0; i < 4; i++) { 
			int row = pt.x + rowNum[i]; 
			int col = pt.y + colNum[i]; 
		 isValid( row, col )
}

or keep it clubbed, helpful in 3D data
 int[][] directions = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};    
for(int[] dir : directions){ x = x + dir[0]; y = y + dir[1]; }


count of digit in perfect powers of 10
count( 10^d ) = 9 * count( 10 ^ (d-1) ) + 10^(d-1)
for other numebers, store count of numbers in arr as 0-9, 10-99, 100-999, as all digits are distributed equally in this case
not as 0-10, 11-100 <- 0,1 are not equal in this case

in seive of erastothenes, we tend to neglect multiple of every number which works; but should be neglecting multiples of prime numbers to reduce complexity; in case of finding prime factors, we can increment factor count using above algo only if we deal with multiples of primes 

while storing minEle in stack question: we can store negative value as marker, or 2*minEle - x as value, when popping check if value if less than current min value, old min value can be found as 2 * minEle - current

general strategy for 2 player optimal playing game, when picking coins, get sum of odd coins, even coins: always pick odd/even coins whichever gives max value forcing only opposite choice to competetor

in shapes like rectangle, sometimes its better to fix one side as max, other side as min of two sides eg as done in box stacking problem for easier comparisons

modulo ops
(a + b) % n = ( a % n + b % n  ) % n
( a*b ) % m = ( a%m * b%m) % m
(a-b)%n = (a + (n - (b%n)) ) %  n // if a-b is -ve and lib doesn't gives positive ouput for negative numbers

in case of backtracking prune the tree with simple optimizzations which can bring running time 1000 times low; like using symmetry we can decide to move down only and multiply number of solutions by 2

for finding subset whose sum is equal to k; we can create two subsets and generate corresponding subsets and store sum in Sa, Sb; then find combinaation between Sa, Sb which can give sum as k -> O( 2^n/2 )
finding all subsets and finding k as sum -> O( 2 ^ n ) which is much higher

for finding minumum queries, during preprocessing we can store logarithmic difference of indexes( nlgn ) in say hashmap, for min value we can calculate in O(nlgn) time. we store min value for 0-1,1-2, 2-3.. 0-3,1-4,2-5.. 0-7,1-8,2-9.. if span of query is not perfect multiple of 2, we find just minimum power of 2 -> k, find min as min( rmq(a,a+k-1), rmq(b-k, b) )

fenwick/bitree: 
index x contains sum of elements at [x-k+1, x], where k is max power value of 2 that divides x; 6 k is 2, 8 k is 8, 16 k is 16 not 4
sum of elements in range (1,k) can be divided into O(lgn) ranges whose sum is in BITree precalculated
when value at position i changes, it needs to change lgn ranges of which i is part of.

for handling range update, single query, store diff of values in array; for udpating (a,b) with k, increase arr[a] by and decrease arr[b] by k.

while finding 3 numbers whose sum equals to say 0, we can sort array, iterate i over its elements, for each i, we can find elements(x,y) in (i+1, n-1) using first-last pointer technique, whose sum is -arr[i], ifso then i, x, y is one of required pair. we might be tempted that x or y can be < ith elment; had it been so it had been found earlier

for finding missing positive numbers, using negative numbers to indicate number has arrived can lead to complex situations. instead put element to its pos-1 the position, swap element at that position to current position; continue with current index.


-x = ~x + 1
set kth bit of x to 1: x | 1 << k
set kth bit of x to 0: x & ~(1<<k)
invert kth bit of x: x ^ (1<<k)
set last one bit of x to zero: x & (x-1)
set all 1 bits to zero : x & -x
invert all set bits after last one bit : x |(x-1)

all grpah algos https://codeforces.com/blog/entry/16221
check if graph is bipartite
do bfs: if adj nodes already have same color its not bipartite otherwise its

articulation vertex: vertices removing which graph wont remain connected, tarjan algo
bridge: edges removing which graph wont remain connected, tarjan algo
graph is strongly connected if there is path between all pair of vertices; it is different than graph without articulation points or bridges
strongly connected components: tarjan or kasaraju

number of factors on n if we have prime factors
84 -> 2^2 . 3 . 7
t( 84 ) : (2+1)*(1+1)*(1+1) -> 12
s( 84 ): (2^3-1/2-1) * (3^2-1/3-1) * ( 7^2-1/7-1)
p( 84 ):  n ^ (t(n)/2) : 84^6

https://www.geeksforgeeks.org/stack-set-2-infix-to-postfix/
evaluation of infix demands compiler to have multiple passes over expression because compiler has to apply operators priority wise; while prefix/postfix can be evaluated in single pass using stack

for postfix: read from left to right
infix -> postfix conversion: operators are pushed onto stack, operands are just outuputted; because we need to rearrange operators acc to precedence
postfix evaluation: operands are pushed to stack; based on operator encountered result is pushed on to stack

for prefix: read from right to left
infix->prefix conversion: operators are pushed onto stack, operands are outputed; reverse the resulting string
prefix evaluation: read right to left, put operands and their result onto stack while evaluating operators

due to pointer limitations in java, xor llist is not possible

for doing calcuation on infix notation, we need to convert into postfix -> calculation on postfix. but if question involves +,-, *,/ only we can use shortcut. instead of converting in postfix, then processing through stack. we can push +/-ve numbers and process them later onto stack. while encountering *,/ we store the result using top numbers. then on completion we add numbers present on stack to return result.

avl tree: balance tree after insertion/deletion
store height of node along with key, update it with operations; it makes avl perform better
for finding LL, LR, RL, RR case we can get balance +/- and key smaller/large than node.left/node.right key we can find the case

prog can survice
1 sec: 10 ^ 8 
O(n) n = 10^7
O(n ln n) n = 10^6
O( n ^ 2 ) n = 10 ^ 4

in bottom up, some times we don't need to fill few fields, eg: in binomial coeff, for nCr we move j <= min( i, r) 

by pigeon hole principle, for set with n elements, there exists a subset sum of whose elements is k*m when n > m 

when state can't be stored directly in 2d/3d array, we can use serialized hashmap eg: stringified stateA_stateB_valC can be memoized and retreived; also for storing states its index is enough eg: jumping from 3 areas to change values can be acheived by assigning area a value

distance b/w two points on graph:
 assuming a square, and moving in destination direction gives different result: 
int ab = Math.min( Math.abs( x1-x2), Math.abs(y1-y2) );
x3 = x2 < x1 ? x1-ab : x1+ab; y3 = y2 < y1 ? y1-ab : y1+ab;
rest = Math.min( Math.abs( x3-x2), Math.abs(y3-y2) );
result = ab+rest;
below is correct:
 Math.max( Math.abs(x2-x1), Math.abs(y2-y1) ); 

maximum area of 1's under matrix can be converted to maximum area under histogram. we can add all 1's in column and generate height array which can be solved to find max area under histogram.

**dp**
modify array to maximize sum of adjacent differences where each element can be 1 or x, can be converted into assemly line scheduling problelm

**graphs**
variations of graphs:
directed
	weighted/unweighted, with/without cycles, connected/disconnected
undirected
	weighted/unweighted, with/without cycles, connected/disconnected
solution approches: bfs, dfs, shortest path: single source / all source, cycle detection, topological sorting, strongly connected, bipartite, flow

In undirected graphs, either Breadth First Search or Depth First Search can be used to detect cycle. In directed graph, only depth first search can be used.

painters' partition problem: it can be solvevd using DP O( k*n^3 ) but using binary search can be solved using O(k*n^2); bs trick is : consider 1 painter can paint in sum and excess painters can paint in max time; we need to increase/decrease partition size and find #required painters, compare it with #availpainters to change low/high value of partition
https://www.geeksforgeeks.org/painters-partition-problem-set-2/

if function want to return two values, pass array in input, fill one/more results in that array.

https://leetcode.com/problems/binary-tree-maximum-path-sum: we don't need to return diameter/max_path_diameter, we compare and store it into global variable, only max_path_till_leaf + root.val needs to be returned which is done by method

in case of 2D array[m][n] traversal for BFS,  its value = i*m+j can be pushed into Queue<Integer> instead of queue of<Pair>. similarly row can obtained as r = pos/m, column can be obtained as c = pos%m; Also rather than storing state in separate 2D matrix, 0 can be converted to intermediate value say 1, then converted back to 2 etc...

disjoint set for 2D array needs row,col to be converted into number which can be used as index for set property., for dummySet use m*n as  separate set.

if we want smaller element on left use stack, keep popping untill there is smaller element on stack; similarly for greater element on left. symmetry allows us to do this from right side if we want next smaller/larger element on right.
But if we want count of smaller/greater elements on left  we need to iterate left to right and store elements in BST while keeping count, freq of element in node
Similarly for smaller/greater elements on right,we need to iterate right to left and store elements in BST

in zig zag labeled full binary tree, if we want to print path upto root, we need to find parent
label + symmetricNode = lowest node at level + highest node at level
= 2^(l-1) + 2^(l)-1
=> parent = ( 2^(l-1) + 2^(l)-1 - label)/2

if keeping sign of numbers as indication of visited, be careful about 0 value... you won;t be able to figure out if that was visited or not

for comparing numbers lexically, use comparator to compare two string- trick is to concat s1+s2, s2+s1 and return their comparison

remove beg / end space using s.trim()
remove intermediate space using: s = s.replaceAll("\\s+", "");

treap implementation
https://www.techiedelight.com/implementation-treap-data-structure-cpp-java-insert-search-delete/
in java we don't have pass by reference for references. so return reference eg root and update root in calling method.

if we want to sort string, convert them into char[] sort them and create string agian
char[] arr = str.toCharArray();
Arrays.sort( arr );
res = String.valueOf( arr );

while creating iterative solution of preorder/inorder to bst... we use stack of nodes, can keep sequence of inorder nodes in hashmap for quick lookup if element is on left side/right side
https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/discuss/564571/Python-and-Java-RecursionIterative

in iterative travel of inorder, push all left nodes on stack, then push right node of node on top.... then cycle again by pushing all left nodes of top node.


container with most water seems it can be solved using stack, but intuition is max area is when poles are distant apart, limited by minimum of two poles. use start, end and compare with existing maxArea to update new area. move start/end whichever is smaller

for finding next permutaion of sequence, instinct can be derived from below. Elements in last would be in decreasing sequence. iterate from last in increasing sequence, find element which breaks this sequence. again iterate from last and swap this element with just greater element in right sequence. now reverse the right sequence to get next permutation.
https://www.youtube.com/watch?v=quAS1iydq7U

in trapping rain water O(n) with O(1) space solution is possible. we can move l, r from extreme ends untill they meet in middle. if arr[l] is less than arr[r], it its greater than maxleft, update maxLeft, if its smaller than maxLeft then add (maxLeft-arr[l]) to result. similarly think from right.

while finding unique comb of repeating numbers, we can use hashset of numbers. we will swap and recurse only if current number is not in hashset.
for iterative solution, make queue of arraylist. for each element in input array... insert that element at all possible indexes in each of dequeued arraylist in queue, requeue new arraylist into queue.

for generating  parenthesis iteratively, we can build current solution over previous one. 
f(0): ""
f(1): "("f(0)")"
f(2): "("f(0)")"f(1), "("f(1)")"
f(3): "("f(0)")"f(2), "("f(1)")"f(1), "("f(2)")"
So f(n) = "("f(0)")"f(n-1) , "("f(1)")"f(n-2) "("f(2)")"f(n-3) ... "("f(i)")"f(n-1-i) ... "(f(n-1)")"
we don't have to 

few questions don't seem that they can be solved divide and conquer. but it possible. eg: finding maximum sum subarray in array. in divide step we find leftMax, rightMax, in merge step we take mergeStepMax = max( leftSubArraySum, rightSubArraySum, leftSubArraySum + rightSubArraySum)... then return max( leftMax, rightMax, mergeStepMax)
https://leetcode.com/problems/maximum-subarray/discuss/20357/Divide-and-Conquer-Java-solution.

finding largest subarray with sum equal to k
It can be solved by using cumSum array and hashmap of sum of incoming elements, index... if curSum - k exists in hashmap, we can update new length
https://leetcode.com/problems/subarray-sum-equals-k/solution/

heap vs bst vs segment tree vs bit tree vs interval tree
heap gives min/max O(1) in all elements; doesn't give min/max on left/right of current index
bst gives min/max/count of smaller/larger elements O(1); doesn't give min/max before / after current index
segment tree: gives min/max/sum in given range O(log n)... helpful for range queries
bit: same as segment tree but space required and complexity is less... helpful for range 
intereval tree: helpful for range based data with range based intersection queries

todo
after trees https://codeforces.com/blog/entry/16221
after strong connectivity http://disi.unitn.it/~montreso/acm-icpc/CompetitiveProgrammersHandbook.pdf
