Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2019-04-01T20:09:46+05:30

====== coding ======
Created Monday 01 April 2019

for fast output 
instead of outputting for each testcase, store result into stringbuilder with \n and output at once

initialize arraylist of arraylist in loop before using, initialize internal array as well:
		for( int i = 0; i < A; i++ ){
			result.add(i, new ArrayList<Integer>() );
			for( int j = 0; j < A; j++ ){
				result.get(i).set(j,0);
			}
		}

.add() method insert the element at the given position and shift the other element accordingly
to overwrite the value at particular index you have to use the .set(position, value)

you can't set an element if it hasn't been added previously in arraylist -> gives array index out of bound exception

https://github.com/nagajyothi/InterviewBit

**mistakes made**
increment / dec not done in loop
eqaulity check in condition wrong, equal/not equal
loop till condition not accurate

when using while loop check for out of bound errors:
while( j < intCount && newInterval.end > intervals.get(j).start )

always write if-elseif-else in clear manner in multiplel lines; if writting in single line be very careful:
				if( j == 0 ){ res.get(i).set(j, res.get(i-1).get(0) ); }
				if( j == i ){ res.get(i).set(j, res.get(i-1).get(j-1) ); }
				else{ res.get(i).set(j, res.get(i-1).get(j-1) + res.get(i-1).get(j) ); }
here second missing elseif above else caused IOUB exception

be careful as & has lower precendece as ==
(val & (1 << j)) == 0

while storing value for sums use long[] instead of int[]; use long for storing sum of values, which can overflow

its not necessary using bitset will consume less memory; it can give MLE while map<Integer, Integer> can pass

while reversing an integer; if we want to check if it will overflow or not, creating a string using stringBuilder and Integere.parseInt can be helpful otherwise
remove last character and add to new number while checking if new number is not overflowing before operation is useful

better way to get top element from stack
char topElement = stack.empty() ? '#' : stack.pop();
when we have correspondence; store mapping in hashmap or array to better code

when using hashmap for be careful if input contains duplicate elements, it can lead to problems later
set<list> will not remove duplicate elements from list

in java we have object reference equality using == means both references point to same memory location / object. if we want equality to be value based, we can use equals() method

we can binary search on matrix.. but it can be used to find kth smallest element 
https://www.programcreek.com/2016/08/leetcode-kth-smallest-element-in-a-sorted-matrix-java/

n Log n solution uses binary search to insert element in dp. Array.binarySearch returns -(pos) at which element would have been inserted.	
https://leetcode.com/problems/longest-increasing-subsequence/solution/

increasing triplet in O(n), we can update min, mid on exploring new number. if any number greater than mid is found we return true.

reverse a string , as string itself doesn't have reverse method
new StringBuilder( s ).reverse().toString()

hist.put(w, !hist.containsKey(w) ? 1 : hist.get(w)+1);

https://leetcode.com/problems/reaching-points/
it is necessary to keep branching under control, simple dfs will go out of control. make sx to tx or sy to ty then reduce steps using modulo. O(2^N) vs O(logN)

we can use KMP to find longest palindrome in string, in O(m). use KMP to find longest palindrome in s + | + rev(s)
https://leetcode.com/problems/shortest-palindrome/discuss/60255/AC-Java-KMP-solution

p * q = num, use both p, q as divisors while iterating till sqrt(num)
for(int j=1;j<=Math.sqrt(num);j++) {
				if(num%j==0) { use both j, num/j as divisors }
}

for cloning a 2D array:
int[][] A = new int[R][C];
for (int r = 0; r < R; ++r)
	  A[r] = grid[r].clone();

we can add element to DSU but can't remove it; in few questions we are asked to remove elements and still have to  use DSU say for calculating max size of component. it can be done by reversing order. We remove all elments first. then add elements one by one in reverse to calculate new size of component. diff will give use impacted elements if we would have gone in first order.... keep on adding elements to DSU and update max. Also ephemeral node at size of DSU can be used to keep track of all connected components....
https://leetcode.com/problems/bricks-falling-when-hit/solution/

when (y-x)%M if we want result to be positive, we can rewrite it as { y+(M-x) } % M
this gives result whether x is smaller/larger than y
this is equivalent to 
y > x ? (y-x)%M : {M- ((x-y)%M) }

generating grey code: consecutive number differ by 1 place. so put previous till ith iteration in list, then add 2(i-1) backwards till beg of list
n = 0: 0
n = 1: 0 | 1
n = 2: 00, 01 | 11, 10
n = 3: 000, 001, 011, 010 | 110, 111, 101, 100
f(n) = f(n - 1) | 2 ^ (n - 1) + f(n - 1)

maximum area under histogram intuition
https://stackoverflow.com/questions/4311694/maximize-the-rectangular-area-under-histogram
in stack approach we push larger elements, when smaller element comes we pop untill top is smaller than current element and calculate area( also keep updating maxArea). it makes sense to keep elements in increasing order in stack, so that while popping all greater elements are popped, because they can contribute in calculating new area.

coin change solution can be done in O(amount) space complexity rather than O( amount x coin-set-size)
instead of dp[i-coin][j] we can select coin one by one and update ways till [coin->amount]


in calculating nth ugly number, for popped element when inserting prime multiples of that number we can skip insertion of new number if count+q.size() is already greater than n. Also after inserting new element, if q.size() > n we can pollLast element as it won't be used.

https://leetcode.com/problems/dungeon-game/discuss/699793/JAVA-simple-DP-solution-faster-than-94-with-explaination-video-link.-Simple-CONCISE-easy
sometimes we have to move from bottom up to build solution as top-down doesn't give the intuitive solution. So here we will be filling 2D array bottom-right to top-left. Be careful of conditions for returning 0 when cumulative sum is [[+ve]] instead of actual sum. It will reduce our requirement of minimum sum required at upper steps.

