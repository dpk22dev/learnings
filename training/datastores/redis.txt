Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.6
Creation-Date: 2017-11-28T23:36:46+05:30

====== redis ======
Created Tuesday 28 November 2017

running servers:
 /etc/init.d/redis_6379 start
 /etc/init.d/redis_6380 start
 /etc/init.d/redis_6381 start

redis arch
https://architecturenotes.co/redis/

https://stackoverflow.com/questions/37953019/wrongtype-operation-against-a-key-holding-the-wrong-kind-of-value-php

cat redirectlogs | awk -F',' '{print " SET \""$1"\" \""$1"\" \n"}' | redis-cli -p 6381 --pipe

http://oldblog.antirez.com/post/redis-persistence-demystified.html

redis uses database 0,1,2 etc in single server mode. cluster mode doesn't support it.
we can dynamically add/remove nodes from cluster; 
redis distriutes keys based on mod operation, we can send key on same shard using hashtag eg:  {user1000}.following, then only user1000 will be used for hashing

pipelining is technique used by servers to accept multiple requests, process them and send response in single go. so instead of server waiting for each response to be read by client, it collects them in memory and responds back with a single response. This performs well as read/write sync call by user process has to context switch to kernel mode causing time delay. redis, pop3 mail server use this optimization technique. benchmarking on same machine for networked server is not right way because server OS has to context switch betwween server and client, majorly involving context switching time.

https://www.pluralsight.com/guides/redis-as-a-dynamic-interconnecting-datastore

does redis use consistent hashing
https://stackoverflow.com/questions/50246763/does-redis-cluster-use-consistent-hashing
yes key is hashed to specific slot, this set of slots are mapped to specific node. only specific keys associated with slots associated with node needs to bbe remapped if node goes down.

redis geohash tutorial
https://www.compose.com/articles/a-quick-guide-to-redis-3-2s-geo-support/

sentinel vs cluster
https://stackoverflow.com/questions/31143072/redis-sentinel-vs-clustering
https://medium.com/@amila922/redis-sentinel-high-availability-everything-you-need-to-know-from-dev-to-prod-complete-guide-deb198e70ea6
redis cluster itself provide failover for selecting master from slave in case of failure; don't need sentinel in cluster


good use cases of redis
https://redis.io/documentation

memory allocation/ deallocation in redis
https://redis.io/topics/memory-optimization

redlock with timeout and retry can be used deadlock free synchronization

redis can send some keys for cache to client. it can broadcast if cached key changes or for any key changes
partitioning Â± : https://redis.io/topics/partitioning

**questions**
master-slave vs sentinel vs cluster
what will happen if we have 9 sentinals and set 2 as quorum in some partitioning
how app will distribute writes to new master after quorum
what problems can arise in cluster quorum: edge cases
	writes when quorum is happening and master doesn't know about it
	old master comes up and thinks it master
are read-writes auto distributed
does it use consistent hashing
	no
how list/set are distributed


[[QnA]]
how is redis used in sentinel mode
Redis Sentinel is a high-availability solution for Redis that provides automated failover and replication. It works by monitoring Redis instances and automatically promoting a replica to a master if the master fails.

In Sentinel mode, Redis is used as a distributed system that is composed of multiple instances. The Sentinels work together to monitor the state of the Redis instances and perform failover operations when necessary.

To use Redis in Sentinel mode, you need to set up a minimum of three Redis instances, one master and two replicas. You also need to set up a Sentinel process for each Redis instance. The Sentinel processes communicate with each other to monitor the Redis instances and coordinate failover operations.

When a Redis instance fails, the Sentinel processes will elect a new master from the available replicas. The new master will then be promoted and the Sentinel processes will update the configuration of the other Redis instances to reflect the new master.

Overall, Redis in Sentinel mode is used to provide high availability and automatic failover for Redis instances. It is a powerful tool for ensuring that Redis remains available even in the face of failures or other issues.


does read write split happens in sentinel mode?
Yes, read-write splitting can happen in Redis Sentinel mode. In Redis Sentinel mode, a client can connect to a Sentinel process and request the address of the current Redis master. The client can then connect to the Redis master and issue read and write commands to it.

However, read-only clients can also connect to the Sentinel process and request the address of a Redis replica. The client can then connect to the replica and issue read commands to it. This allows for read load to be distributed across multiple replicas, which can improve overall system performance.

Redis Sentinel mode can be configured to handle read-write splitting automatically. This can be done by configuring the Sentinel processes to send read-only commands to replicas and write commands to the master. This ensures that read and write load is distributed across the system appropriately.

Overall, Redis Sentinel mode supports read-write splitting and can be configured to handle it automatically. This allows for read and write load to be distributed across the system appropriately and can improve overall system performance.

engineering challeges in redis design
Data consistency: Redis supports replication and clustering to improve availability and performance, but ensuring data consistency across replicas can be challenging. Redis uses asynchronous replication, which can lead to data inconsistencies if replication lag is not carefully managed.



