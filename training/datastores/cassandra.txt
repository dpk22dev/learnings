Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.6
Creation-Date: 2017-07-20T11:33:08+05:30

====== cassandra ======
Created Thursday 20 July 2017

cd /opt/installs/apache-cassandra-3.11.2

cassandra cli doessn't accept "" quotes, use ' in string
official site
https://docs.datastax.com/en/cassandra/3.0/cassandra/initialize/initSingleDS.html
cql
https://docs.datastax.com/en/cql/3.3/cql/cql_using/useInsertList.html

running cassandra on single machine
https://docs.genesys.com/Documentation/HTCC/8.5.2/Dep/InstallCassandra2x

visualising cassandra storage logically
https://medium.com/code-zen/cassandra-schemas-for-beginners-like-me-9714cee9236a

official apache cassandra docs has lots of missing info, except how to build etc.
http://cassandra.apache.org/doc/latest/data_modeling/index.html

simple book for revision
https://teddyma.gitbooks.io/learncassandra/content/index.html

peer 2 peer arch: improve availablity, always online

Keyspace is the outermost container for data in Cassandra( like dataabase in rdbms ). keyspace attributes:
Replication factor, Replica placement strategy, Column families 

A column family is a container for an ordered collection of rows( like tables in rdbms ). coloumn family attributes:
keys_cached, rows_cached, preload_row_cache
Generally column families are stored on disk in individual files. 

A column is the basic data structure of Cassandra with three values, namely key or column name, value, and a time stamp. 
A WHERE clause can be used only on the columns that are a part of primary key or have a secondary index on them.

in a cluster if node2 goes down, other nodes will start storing keys corresponding to node2 with hint that if node2 comes alive again; it will be transfered there.

system.keyspace stores metadata for cluster funcitoning. when new node comes online, its dumb; it gets aquinted to cluster. bootstraping: start copying data from seed nodes. it has two coloumn families: schema coloumn family, migration coloumn family

seed nodes: they are not master node. they have responsibility to provide data to other nodes.

after writing to commit log, data is written into memtable( data structure not file ); once data reaches threshold level, data is written to sstable( file on disk ). if we run compaction, multiple sstables are merged into single sstable, older ones are deleted. read op will read from memtable, then to sstables. timestamp associated with coloumn decides which sstable is latest.
tombstone: soft deleted data. deletion is expensive for cassandra, so deletion of records happens after some time. tomb stones are garbage collected after this time or during compaction

read only compaction happens while reading merging of keys happen.major compaction is in-memory process, sstables are loaded into memory: resource intensive process, should be kept low priority. increase read performance.

bloom filter can give false positive, but no false negatives; cache stores which sstable shold be read/ write to. each sstable has associated bloom filter, which can be queried to get row.

load balancing handled by partitioner. 
snitch: which nodes are nearer to me. types: simple, dynamic, rack inferring snitch

anti entropy: singleton service; replica synch mechanism, ensuring data is correctly replicated to other nodes. nodes exchange merkel trees during compaction to neighbours. only differece is detected and applied.

read repair: when read consistency is kept high, data will be fetched from all replicas, compared and with latest timestamp will be returned. meanwhile anti entropy service will be called to sync data. 

follow SEDA( stage event driven arch )
each stage has associated queue and thread pool to handle tasks.

services:
cassandra daemon, storage service, messaging service, hinted handoff manager

cassandra doeson't support: group by,order by,count,sum,ifnull,concat ,joins and some times nested querys"
cassandra moved from thirft RPC to CQL based protocol
in coloumn we can use set, list, map

compound primary key: partition key + cluster keys
eg: ((C1, C2,…), (C3,C4,…))
partitioner computes hash value of partition key, which determines partition containing row.
cluster key: store row data in a sorted order.
Cassandra stores only one row for each partition key. All the data associated with that partition key is stored as columns in the datastore. All the data that is inserted against same clustering key is grouped together.
yes cassandra stores data ordered acc to clusterging key. Cassandra achieves performance by using the clustering keys to sort your data on-disk, thereby only returning ordered rows in a single read (no random reads).
https://stackoverflow.com/questions/35708118/where-and-order-by-clauses-in-cassandra-cql
https://shermandigital.com/blog/designing-a-cassandra-data-model/

why cassandra scales
https://medium.com/techlogs/apache-cassandra-the-minimum-internals-you-need-to-know-89724603abb2

cqlsh
Collection types cannot be nested, but frozen collection types can be nested inside frozen or non-frozen collections.

If data already exists for the column, Cassandra indexes the data during the execution of this statement. After the index is created, Cassandra indexes new data for the column automatically when new data is inserted.

Cassandra’s sorted immutable SSTables allow for linear reads, few seeks, and few overwrites, maximizing throughput for HDDs and lifespan of SSDs by avoiding write amplification. By separating the commitlog from the data directory, writes can benefit from sequential appends to the commitlog without having to seek around the platter as reads request data from various SSTables on disk.


https://stackoverflow.com/questions/13010225/why-many-refer-to-cassandra-as-a-column-oriented-database

designing cassandra data model
https://shermandigital.com/blog/designing-a-cassandra-data-model/

composites:
https://www.datastax.com/dev/blog/introduction-to-composite-columns-part-1


https://www.datastax.com/dev/blog/lightweight-transactions-in-cassandra-2-0

cassandra pitfalls: 
https://blog.parse.ly/post/1928/cass/

cassandra hardening in office:
https://confluence.dhisco.com/display/DQ/Cassandra


source code analysis:
https://wiki.apache.org/cassandra/ArchitectureInternals
http://prettyprint.me/prettyprint.me/2010/05/02/understanding-cassandra-code-base/index.html
https://www.youtube.com/watch?v=W6e8_IcgJM4


**resources**
video lectures
https://academy.datastax.com/resources/ds201-cassandra-core-concepts
https://academy.datastax.com/planet-cassandra/making-the-change-from-thrift-to-cql
primary key ( or row key ) vs partition key
https://dzone.com/articles/cassandra-data-modeling-primary-clustering-partiti

**questions**
~~diff b/w table and coloumn famly~~
	both are same
~~how to use regex in where ~~
	no
how to use coloumns in where when its not indexed

diff b/w column  family and table

dynamic coloumns how to?
	cql doesn't allow this, but we can lists, set, map etc.
	
does data gets sharded and replicated to each node? how diff from master slave
how to use bloom filter 
ui inteface, is there http api
when compaction happens, merged sstables are sent to neighbours or compaction is triggered there too.

why cassandra is always on arch
	not because every node contains replicated data. each node can act as coordinator, coordinator acts as proxy between client and owner node. if owner node is down, keys are stored in other nodes with hint.
	
can peer 2 peer can become bottleneck in cassandra
how transactions are handled by cassandra		

what info is stored in commit log
is response  returned only after wrinting to memtable, replicating to quorum nodes

design schema considerations
https://www.datastax.com/dev/blog/basic-rules-of-cassandra-data-modeling

SSTable internals:
http://distributeddatastore.blogspot.com/2013/08/cassandra-sstable-storage-format.html
https://saumitra.me/blog/how-cassandra-stores-data-on-filesystem/

cassandra vs mysql
MySQL’s storage models are broadly reminiscent of traditional b-trees or in some cases hash-trees, while Cassandra’s storage models broadly resemble LSM’s (Log Structured Merge trees).

diff b/w various strategies
what is snitch used for
what is bloom filer used for
how frozen and non-frozen coloumns are handled
we set replication factor on tablespace; is that followed by all tables in it
how indexes are created in it

 udt's need to be frozen, mutable udt are still in pipeline
collection within collection too need to be frozen

vnodes in partitioning
https://stackoverflow.com/questions/25379457/what-is-virtual-nodes-and-how-it-is-helping-during-partitioning-in-cassandra

http://thelastpickle.com/blog/2016/12/08/TWCS-part1.html

**todo**
issues https://docs.datastax.com/en/dse-planning/doc/planning/planningAntiPatterns.html#AntiPatRack
cassandra data model best practices
cassandra data model bad practices / pitfalls
is cassandra good for update or inserts
can we index some column and query based on that column
https://stackoverflow.com/questions/6162789/mongodb-vs-cassandra-vs-mysql-for-real-time-advertising-platform
http://hadoopmag.com/cassandra-internal-storage/
cassandra in memory vs on disk
supercolumns vs composite columns : diff 
are supercolumns bad why
materialized view why 



https://www.instaclustr.com/apache-cassandra-compaction/
	AND gc_grace_seconds = 86400
	AND max_index_interval = 2048
	AND memtable_flush_period_in_ms = 0
	AND min_index_interval = 128
	AND read_repair_chance = 0.0
	AND speculative_retry = '99.0PERCENTILE';
https://www.datastax.com/blog/2011/05/understanding-hinted-handoff-cassandra-08
speculative retry
UDT


xml beam - projected framework

IHG 400k 
400k x 50 product 2000 k for 1 chain
marriot
...











