Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.6
Creation-Date: 2017-07-10T14:33:33+05:30

====== neo4j ======
Created Monday 10 July 2017

~~docker run -d -p 7474:7474 -p 7473:7473 -p 7687:7687 -v /data/neo_docker_import:/var/lib/neo4j/import -v /data/neo_docker_data:/data --name neo my_neo4j~~

~~ docker run -d -p 7474:7474 -p 7473:7473 -p 7687:7687 -v /data/docker_neo/neo_docker_import:/var/lib/neo4j/import -v /data/docker_neo/neo_docker_data:/data -v /data/docker_neo/neo_plugins:/var/lib/neo4j/plugins --name neo my_neo4j~~

**overriding security of apoc**
 docker run -d -p 7474:7474 -p 7473:7473 -p 7687:7687 -e NEO4J_dbms_security_procedures_unrestricted=apoc.\\\* -v /data/docker_neo/neo_docker_import:/var/lib/neo4j/import -v /data/docker_neo/neo_docker_data:/data -v /data/docker_neo/neo_plugins:/var/lib/neo4j/plugins --name neo my_neo4j


**creating grpah using ui tool**
http://www.apcjones.com/arrows/

dumping data from neo4j container
https://serverfault.com/questions/835092/how-do-you-perform-a-dump-of-a-neo4j-database-within-a-docker-container

[[http://localhost:7474/browser/]]
u: neo4j
pass: times11!

cypher documentation
https://neo4j.com/docs/cypher-refcard/current/

perf setting hardening
https://neo4j.com/docs/operations-manual/current/performance/

neo4j doesn't heirarchical object in properties
https://stackoverflow.com/questions/40237021/insert-array-of-objects-as-property-into-neo4j

similar to etag in http, graph uses bookmark in session to have causal relationship which is missing in raft algo

graph storage
graph compute

match mulltiple destination nodes
https://stackoverflow.com/questions/25939493/neo4j-match-multiple-destination-nodes

**framework for recommendations**
multiple recommendation engines
score and score transformers
blacklists
filters
post processors
loggers
testing

intro to neo4j/grpah dbs
https://www.youtube.com/watch?v=fOFbDaaCwYo
https://gauravsarma1992.medium.com/neo4j-storage-internals-be8d150028db

normal RDBMS use 2PC, in which coordinator coordinates commit across multiple nodes. Single point of contention. Research shown that 13% of transactions need to be coordinated as they touch different servers/data. instead use chaining commit transaction, with each node having small responsibility of commit instead of single coordinator. if transaction overlap in single node they can be identified for their sequences. direction of transaction can be changed. even combination of small chains & coordinators can give huge scalability & strong consistency guarantees.

__quest__
what should be made node, relationship, label
can we just store data in neo4j or it should be backed by other db
how it stores data internally
what is neo4j bad at


**todo**
read book
	84
data modeling 
markov chain 
https://neo4j.com/developer/data-modeling/
backup
php lib for neo
