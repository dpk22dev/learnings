Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2014-08-02T20:27:34+05:30

====== symfony ======
Created Saturday 02 August 2014

till page: 52
[[/home/dpk/Downloads/Symfony]] — symfony downloaded files
[[/home/dpk/Documents/symfony]] — installed vendor files

http://svn.infoedge.com/newsvn/NaukriLibs/tags/Symfony2.3/20140429-1.0-Symfony2.3/

php composer.phar install
php composer.phar update

Symfony2 comes with three environments defined — dev, test and prod — but you can create your own as well.

for clearing cache:
php app/console cache:clear --env=prod --no-debug

While a controller can be any PHP callable (a function, method on an object, or a Closure)

[[/app/config/parameters.yml]] 

we can use listeners  in symfony in request, exception, response listeners; we can use these listeners to intercept them 
we can register them in services.yml or inject them

process, command can be used instead of exec
run commands using php app/console  commandName --args

we can avoid writing factory by using tagged services. it uses compiler pass which needs to be regiestered in bundle

***** use and include *****
we need to include necessary php files. 
we can define namespace and then use classes/functions from that namespace in other functions etc...
eg:
include 'file1.php';
use foo as feline; // file.php has foo namespace and Cat class with says static method
echo \feline\Cat::says()

~~project creation can be done using symfony.phar or composer~~
~~cookie is a parameter-bag, file is a file-bag. what does it mean?~~
~~ob_start , ob_get_clean functions usage~~
why aren't we using doctrine
~~doesn't framework slows down the response~~
~~do we use composer? how we have installed~~
~~where is smarty/ libs and classes~~
~~how does caching work in symfony... what are possible issues, how are they resolved, what dirs need to be deleted~~
~~is it neccessary to keep template in directory name with controller dir name~~
~~what are services, how they are different from controler~~


~~why so much use of namespaces~~
put symfony in [[/var/www]] so that apache can read it
request first comes to web/app_dev.php which checks for web/config.php if not commented for handloing request
similar to wordperess installation it will ask and put values in app/parameters.yml  like connection string
install composer.phar, put required libs in composer.json and use composer commands like: php composer.phar install
it will put libs in vendor/package dir; for autoloading require 'vendor/autoload.php', which internally includes from vendor/composer

give proper permissions to app/config, logs dir
we can use symfony or composer to create new project

symfony handles routing of url to controller/action, rendering of template, different optimization acc to env like giving debug info in dev env, performance in prod env, wrapping request into objects,

we can tell the format in action:
/**
* @Route("/hello/{name}.{_format}",
* defaults = {"_format"="html"},
* requirements = { "_format" = "html|xml|json" },
* name = "hello"
* )
 */

By throwing exception, throw new \Exception('Something went horribly wrong!'); symfony will convert into 500 error page response

app/AppKernel.php contains list of bundles where vendor specific bundles are added and we can add our bundlers

config/config.yml contains bundle specific configurations, For example, framework configures the FrameworkBundle while swiftmailer configures the SwiftmailerBundle. it can import configurations from other config files like parameters.yml, security.yml; so we can create our own configs and import them. Now environment specific configs can import & override config.yml configs

bundles can be extended to override controllers and activities. 

 Instead of parsing and combining all those files for each request, Symfony uses its own cache system. In fact, the application configuration is only parsed for the very first request and then compiled down to plain PHP code stored in the app/cache/ directory.

when saying component we are talking about src/symfony/Component/* eg: Browserkit, classLoader, console, Routing i.e. symfony's internals'

Doctrine: ORM( Object relational mapper )
when using Doctrine, be careful not to use entity name as reserved keyword for SQL or engine. Doctrine takes care of caching as well eg: inserting 100 inserts individually inserts in single query. we can use doctrine:commands for generating entities, creating schema etc. then Entity class can be used with doctrine functions to insert/uupdate/delete or query table.
rather than writing query creation etc task in controller we can write query logic in EntityRepository class and call those methods from controller
we can define relatiuonship among entities using
[[/**]]
* @ORM\OneToMany(targetEntity="Product", mappedBy="category")
*/
but for join etc things get complex

propel ( Active Record Mapper )

we can write ft using extending WebTestCase class; it returns a client which we can use to GET page; fill form, click on link, submit etc; check the response contains intended headers, content contains some links, what response code is etc, browser functions like going back/forward/reload/removeCoookies, 
crawler object returned has methods like jQuery to access DOM elements of response
while creating client which request for url we can set environment of symfony, header for request

Symfony's form library uses the validator service internally to validate the underlying object after values have been submitted.

in form name using csrf_protection : true , symfony automatically inserts token to avoid csrf

in security.yml we can define authentication type according to role, encoding using some algo, access control : defining what role user can access what path, at controller level:
/**
* @Security("has_role('ROLE_ADMIN')")
*/
annotation can be added
$this->get('security.authorization_checker')->isGranted('IS_AUTHENTICATED_FULLY') for checking if user is logged in controller/services

http header like max-age, expire, etag can be set usign $response->methods()

in symfony's terms a Service is any PHP object that performs some sort of "global" task. This object does something like sending mail. So mailSender is service but mail is just object. A Service Container (or dependency injection container) is simply a PHP object that manages the
instantiation of services. Service is never created untill required, once created same object is returned on each request.

container consists of parameters and services; parameters can be accessed using %name% where name can be defined in another file.yml, services can be accesssed using @serviceName; we can escape parameter name containing @ by prepending another @



__SM code analysis__
for showing captcha using reCaptcha php lib by goolge
many of funcitons are available in util/common candidate, client, project related
download util: for downloading application, candidate, progile as pdf, excel etc 
excel writer: uses PHPExcel_IOFactory for writning to excel file
exception util: SMExceptionHandler extends ExceptionHandler( symfony ) so we can set funciton for handling exception 
iamge util: uses php thumb to generate thumbnail for image
mail parser: mailparse_msg_ php lib funciotns are used  
mailer: swiftMailer, zendMailer, DKIM signers are used
naukri: processing apply, cv
Notifier: get, insert, update notification into notifier db
Publisher: posting jobs to various places
Queue: putting and popping dataa from rabitMQ
RPservice: fetching rp data

**third party**
autologger: looks like for autologin on mail verification, stores encrypted token in db and verifies it
centrallogger: reads config.yml and accordingly logs
	it can send mails and sms, we are using xml_content and use http://api.myvaluefirst.com/psms/servlet/psms.Eservice2 for sening sms
	logs written to file, mysql and scribe logger	
dnsresolver for resolving srv records
encryptor for one way and two way encryption
php xlsx writer third party for wrintng to excel files
location finder : i think for distance diff b/w locations
SPservice client to call services 
PEST for json and xmlPEST requests
Rauthenticator for SSO
RestRequest to do curl for any verb
resumeparser
SSOManager uses Rauthenticator, autologger, CDNlib for session handling
ncYAML uses sfYAML to parse yaml into php, but use file or apc cache or xcache for caching php

**writing command**
mycomamnd extends SMBaseCommand : which extends ContainerAwareCommand
we write configure and execute options whcih inject services, can call other methds, 

**wrinting Dao**
CandidateDaoImpl extends BaseDaoNcPDO which implements BaseDao
DBConnectionFactyoryNCPdo return Db connection for subscription, micrositepdodb , finds shardID for client using ncDatabaseManager third party

some configs like assetversions are added as parameters in config.yml
but databases.yml are not included directly, instead they are loaded using ncYaml third party and used for providing db connection
similartly for logger, encryption, 




__quest-ans__

~~how can we write our own bundle/services for symfony~~
~~we can create path in js, template in twig from routing info, how their bundles do it~~
~~how vendor is added~~
read few  UTs and analyse

~~installing symfony~~
~~symfony architecture~~
~~integration with composer, phpunit~~

~~how to create new environment in symfony~~

disscuss resumeservice and thrift code with nitin


~~what is in caching files, what symfony does in caching: what files get cached~~

what things are to be put in app/config/config, parameters, routing, security.ymls
~~what exactly is in command, how to run commands~~ 
~~funda of services/DI/containers in symfony~~
extension in symfony, how is it different from services, vendor provided libs, plugins
when should we create different bundles

~~why is it called a bundle and not a plugin?~~ 
This is because everything is a bundle in Symfony, from the core framework features to the code you write for your application. a bundle is a structured set of files (PHP files, stylesheets, JavaScripts, images, ...) that implements a single feature (a blog, a forum, ...) and which can be easily shared with other developers.

__SM specific__
why we have put menu differently 
~~in sm code how is elastic search, database connection, memcache, rabbitmq, logger etc happening~~
~~how sessions and cookies, OAuth are managed~~
we can use security.context inbuilt in php to set/unset token, sesssion for clearing and invalidating session
        $this->get('security.context')->setToken(null);
	$this->getRequest()->getSession()->clear();
        $this->getRequest()->getSession()->invalidate();

	$response->headers->clearCookie("sm_session");
	
for single signon we are using SSOFactory.class.php which which returns object of SessionManager class which internally uses RAuthenticator( main functionality is here ) for storing cookies, blocked ip in db and retreival and setting/unsetting single sign on session 

~~how sms, mail sending is handled~~
	mail by using sendmail; sms by using api

how form in controller is different from smarty views form creation, how we use it
~~Why so many Resources/configs in bundle, how to tell symfony to load those configs as well~~
we include them in app/config.yml

~~diff b/w resman and resdex~~
resman: Jobseeker side team for resume
resdex: recruiter side team for resume

usage of features.list, why have we created it 
how to tell symfony that we are creating utils, service, validator dirs in bundle, do we have to do this
disscuss what each third party does

~~why aren't we using doctrine~~
read some FTs, what are written
how are roles used defined in security.yml~~, are we using own cookies for auth~~
in bundles what is inside DependencyInjection dirs
should we create service for everything and inject
understanding services-cache.yml nodes, 
why aren't we using AppCache in web/app.php

why sumsapi, nlogger is used
diff b/w ncfileupload and filestorageservice; didn't get why getfile are we using? what is role of upload callback
forms storage
php thumb and thrift service client are remaing

how symfony knows about command name
